<?php

declare(strict_types=1);

namespace ShlinkioApiTest\Shlink\Rest\Utils;

use PHPUnit\Event\Code\TestMethod;
use PHPUnit\Event\Test\PreparationStarted;
use PHPUnit\Event\Test\PreparationStartedSubscriber;
use ReflectionMethod;
use Webimpress\SafeWriter\FileWriter;

use function sprintf;
use function var_export;

use const ShlinkioTest\Shlink\DYNAMIC_ENV_VARS_FILE;

/**
 * Checks if a test to be executed has the WithEnvVars attribute, and if so, creates a file with the env vars it defines
 * and restarts RoadRunner test server so that those env vars are applied.
 */
class EnvSpecificTestListener implements PreparationStartedSubscriber
{
    public function notify(PreparationStarted $event): void
    {
        $test = $event->test();
        if (! ($test instanceof TestMethod)) {
            return;
        }

        $className = $test->className();
        $methodName = $test->methodName();

        $reflection = new ReflectionMethod($className, $methodName);
        $attributes = $reflection->getAttributes(WithEnvVars::class);

        // If the method has the attribute, generate a temporary env file, and restart the RoadRunner server
        if (! empty($attributes)) {
            /** @var WithEnvVars $withEnvVars */
            $withEnvVars = $attributes[0]->newInstance();
            $this->createDynamicEnvVarsFile($withEnvVars->envVars);
            ApiTestsExtension::restartRRServer();
        }
    }

    private function createDynamicEnvVarsFile(array $envVars): void
    {
        $template = <<<TEMPLATE
            <?php
            
            /* Shlink config generated by %s */
            
            return %s;
            
            TEMPLATE;
        $content = sprintf($template, self::class, var_export($envVars, return: true));

        FileWriter::writeFile(DYNAMIC_ENV_VARS_FILE, $content);
    }
}
